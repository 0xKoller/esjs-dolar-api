importar fs desde 'node:fs'
importar { useOpenapi } desde 'vitepress-theme-openapi'
importar { useCodeSamples } desde '../../../docs/.vitepress/theme/composables/useCodeSamples.js'

funcion loadJSON(path) {
  retornar JSON.analizar(fs.readFileSync(crear URL(path, import.meta.url)));
}

const spec = loadJSON('../../../docs/public/openapi.json')

const openapi = useOpenapi()
openapi.setSpec(spec)

exportar funcion init() {
  mut output = `---
aside: false
outline: false
title: Dólares Ámbito
---

<script setup>
import { setRegionForSidebar } from '../../.vitepress/sidebar/sidebar.utils.js'

setRegionForSidebar('ar')
</script>
`

  Object.claves(spec.paths).filtrar((path) => path.comienzaCon('/v1/ambito')).mapear((path, index, array) => {
      const { operationId } = spec.paths[path].get
      const markdown = generateMarkdown(operationId)

      output += markdown

      // Si no es el último elemento, agregar hr
      si (index !== array.longitud - 1) {
        output += `
<hr style="margin: 4rem 0;">
`
      }
    })

  fs.writeFileSync(`docs/argentina/ambito/index.md`, output)
}

funcion generateMarkdown(operationId) {
  const operation = openapi.getOperation(operationId)

  const codeSamples = useCodeSamples().getCodeSamples(operationId)

  const schemas = openapi.getSchemas()

  const response200 = operation.responses['200']

  const responseType = response200.content['application/json'].schema.items
    ? 'array'
    : 'object'

  const schemaTitle = (responseType === 'array' ? response200.content['application/json'].schema.items : response200.content['application/json'].schema).$ref.dividir('/').sacar()

  const schema = Object.valores(schemas).buscar(
    (schema) => schema.title === schemaTitle,
  )

  const schemaJson = useOpenapi().propertiesTypesJson(schema, responseType)

  const markdown = `
<Operation method="GET" id="${operationId}">

<template #header="header">

# ${operation.summary}

</template>

<template #description="description">

<OperationEndpoint :method="description.method" :path="description.path" :baseUrl="description.baseUrl" />

${operation.description || ''}

<!--@include: ./parts/${operationId}-description-after.md -->

</template>

<template #responses="responses">

## {{ $t('Response') }}

<Responses :responses="responses.responses" :schema="responses.schema" :responseType="responses.responseType">

<template #body="body">

<ResponseBody :schema="body.schema" :responseType="body.responseType" />

</template>

<template #example="example">

\`\`\`json
${schemaJson}
\`\`\`

</template>

</Responses>

</template>

<template #try-it="tryIt">

<TryItButton :operation-id="tryIt.operationId" :method="tryIt.method">

<template #response="response">

\`\`\`json-vue
{{ response.response }}
\`\`\`

</template>

</TryItButton>

## {{ $t('Samples') }}

::: code-group

\`\`\`bash [cURL] 
${codeSamples.curl.source}
\`\`\`

\`\`\`js-vue [JavaScript]
${codeSamples.javascriptFetch.source}
\`\`\`

\`\`\`php-vue [PHP]
${codeSamples.php.source}
\`\`\`

\`\`\`python-vue [Python]
${codeSamples.python.source}
\`\`\`

:::

</template>

</Operation>
`
  retornar markdown
}

intentar {
  init()
} capturar (error) {
  consola.error(error)
}
